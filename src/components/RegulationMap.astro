---
import countries from '../data/countries.json';
import regulationsData from '../data/links.json';
---

<div id="map" class="map-container"></div>
<div class="legend">
  <h3 class="legend-title">AI Medical Regulations</h3>
  <div class="legend-item">
    <div class="legend-color implemented"></div>
    <span>Implemented</span>
  </div>
  <div class="legend-item">
    <div class="legend-color in-development"></div>
    <span>In Development</span>
  </div>
  <div class="legend-item">
    <div class="legend-color no-regulation"></div>
    <span>No regulation</span>
  </div>
</div>

<script>
  import L from 'leaflet';

  const geoData = (window as any).countries;
  const regulationsData = (window as any).regulationsData;

  // Function to get country regulation info from comprehensive data
  function getCountryRegulationInfo(countryCode) {
    return regulationsData?.countries?.[countryCode] || null;
  }

  // Function to check if country has AI policies
  function hasAiPolicies(countryCode) {
    const countryData = getCountryRegulationInfo(countryCode);
    return countryData !== null;
  }

  // Function to get regulation status
  function getRegulationStatus(countryCode) {
    const countryData = getCountryRegulationInfo(countryCode);
    if (!countryData) return 'no-regulation';
    return countryData.status === 'Implemented' ? 'implemented' : 'in-development';
  }

  function initMap() {
    const worldBounds = [
      [-90, -180], // Southwest coordinates
      [90, 180]    // Northeast coordinates
    ];

    const map = L.map('map', {
      center: [20, 0],
      zoom: 3,
      minZoom: 3,
      maxZoom: 6,
      maxBounds: worldBounds,
      maxBoundsViscosity: 1.0,
      worldCopyJump: false
    });

    // Dark mode tiles
    L.tileLayer('https://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}{r}.png', {
      attribution: '© OpenStreetMap contributors © CARTO',
      noWrap: true,
      bounds: worldBounds
    }).addTo(map);

    // Style function for countries
    function style(feature) {
      const countryCode = feature.properties["ISO3166-1-Alpha-2"] || feature.properties.iso_a2 || 
                         feature.properties.ADM0_A3 || feature.properties.adm0_a3;
      
      const status = getRegulationStatus(countryCode);
      
      const styles = {
        'implemented': {
          fillColor: '#10b981', // Green for implemented
          weight: 2,
          opacity: 1,
          color: 'white',
          dashArray: '3',
          fillOpacity: 0.8
        },
        'in-development': {
          fillColor: '#f59e0b', // Orange for in development  
          weight: 2,
          opacity: 1,
          color: 'white',
          dashArray: '3',
          fillOpacity: 0.8
        },
        'no-regulation': {
          fillColor: '#3388ff', // Blue for no regulation
          weight: 2,
          opacity: 1,
          color: 'white',
          dashArray: '3',
          fillOpacity: 0.7
        }
      };
      
      return styles[status] || styles['no-regulation'];
    }


    // Highlight feature function
    function highlightFeature(e) {
      const layer = e.target;
      
      layer.setStyle({
        weight: 5,
        color: '#666',
        dashArray: '',
        fillOpacity: 0.7
      });
      
      if (!L.Browser.ie && !L.Browser.opera && !L.Browser.edge) {
        layer.bringToFront();
      }
    }

    // Reset highlight function  
    function resetHighlight(e) {
      geoJsonLayer.resetStyle(e.target);
    }

    // Zoom to feature function
    function zoomToFeature(e) {
      map.fitBounds(e.target.getBounds());
    }

    // Feature event handlers
    function onEachFeature(feature, layer) {
      layer.on({
        mouseover: highlightFeature,
        mouseout: resetHighlight,
        click: zoomToFeature
      });
      
      // Add enhanced popup with comprehensive country info
      if (feature.properties) {
        const countryName = feature.properties.NAME || feature.properties.ADMIN || feature.properties.NAME_LONG || feature.properties.name || 'Unknown Country';
        const countryCode = feature.properties["ISO3166-1-Alpha-2"] || feature.properties.iso_a2 || 
                           feature.properties.ADM0_A3 || feature.properties.adm0_a3;
        const countryData = getCountryRegulationInfo(countryCode);
        
        let popupContent = `
          <div class="popup-content" style="max-width: 450px;">
            <h3>${countryName}</h3>
            <small style="color: #94a3b8;">Code: ${countryCode || 'N/A'}</small>
        `;
        
        if (countryData) {
          const statusColor = countryData.status === 'Implemented' ? '#10b981' : '#f59e0b';
          const statusIcon = countryData.status === 'Implemented' ? '✓' : '⚠';
          
          popupContent += `
            <div style="margin: 12px 0;">
              <div style="color: ${statusColor}; font-weight: bold; margin-bottom: 8px;">
                ${statusIcon} ${countryData.status}
              </div>
              <div style="margin-bottom: 8px;">
                <strong>Type:</strong> ${countryData.regulationType}<br>
                <strong>Since:</strong> ${countryData.implementationYear} 
                ${countryData.lastUpdate ? `(Updated: ${countryData.lastUpdate})` : ''}
              </div>
          `;
          
          // Add regulations
          if (countryData.regulations && countryData.regulations.length > 0) {
            popupContent += `
              <div style="margin-top: 12px;">
                <strong style="color: #10b981;">Regulations:</strong>
                <div style="margin-top: 6px;">
            `;
            
            countryData.regulations.forEach(reg => {
              popupContent += `
                <div style="margin-bottom: 10px; padding: 8px; background: rgba(148, 163, 184, 0.1); border-radius: 4px;">
                  <strong>${reg.name}</strong> (${reg.year})<br>
                  <small style="color: #94a3b8;">${reg.authority}</small><br>
                  <em style="font-size: 12px; color: #cbd5e1;">${reg.description}</em>
                  ${reg.link ? `<br><a href="${reg.link}" target="_blank" rel="noopener" style="color: #3b82f6; font-size: 11px;">View Source →</a>` : ''}
                </div>
              `;
            });
            
            popupContent += `</div></div>`;
          }
          
          // Add key features
          if (countryData.keyFeatures && countryData.keyFeatures.length > 0) {
            popupContent += `
              <div style="margin-top: 12px;">
                <strong style="color: #10b981;">Key Features:</strong>
                <ul style="margin: 6px 0; padding-left: 16px; font-size: 12px;">
            `;
            countryData.keyFeatures.forEach(feature => {
              popupContent += `<li style="margin-bottom: 3px; color: #cbd5e1;">${feature}</li>`;
            });
            popupContent += `</ul></div>`;
          }
          
          // Add approved devices count
          if (countryData.approvedDevices) {
            popupContent += `
              <div style="margin-top: 8px;">
                <strong>Approved Devices:</strong> <span style="color: #10b981;">${countryData.approvedDevices}</span>
              </div>
            `;
          }
          
          popupContent += `</div>`;
        } else {
          popupContent += `
            <div style="margin-top: 12px;">
              <span style="color: #6b7280;">No specific AI medical device regulations</span>
            </div>
          `;
        }
        
        popupContent += `</div>`;
        
        layer.bindPopup(popupContent);
      }
    }

    // Add GeoJSON layer with country polygons
    const geoJsonLayer = L.geoJSON(geoData, {
      style: style,
      onEachFeature: onEachFeature
    }).addTo(map);
  }

  // Initialize map when DOM is loaded
  document.addEventListener('DOMContentLoaded', initMap);
</script>

<script define:vars={{ countries, regulationsData }}>
  window.countries = countries;
  window.regulationsData = regulationsData;
</script>

<style>
  .map-container {
    height: 100vh;
    width: 100vw;
    position: fixed;
    top: 0;
    left: 0;
    z-index: 1;
  }

  .legend {
    position: fixed;
    bottom: 30px;
    left: 30px;
    background: rgba(15, 23, 42, 0.9);
    border: 1px solid rgba(148, 163, 184, 0.2);
    border-radius: 8px;
    padding: 12px;
    z-index: 1000;
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
    backdrop-filter: blur(8px);
  }

  .legend-item {
    display: flex;
    align-items: center;
    margin-bottom: 8px;
    color: #f1f5f9;
    font-size: 14px;
  }

  .legend-item:last-child {
    margin-bottom: 0;
  }

  .legend-color {
    width: 16px;
    height: 16px;
    border-radius: 4px;
    margin-right: 8px;
    border: 2px solid white;
  }

  .legend-color.implemented {
    background-color: #10b981;
  }

  .legend-color.in-development {
    background-color: #f59e0b;
  }

  .legend-color.no-regulation {
    background-color: #3388ff;
  }

  .legend-title {
    color: #f1f5f9;
    font-size: 16px;
    font-weight: 600;
    margin: 0 0 12px 0;
  }

  :global(.popup-content) {
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
  }

  :global(.popup-content h3) {
    margin: 0 0 10px 0;
    color: #f1f5f9;
  }

  :global(.popup-content p) {
    margin: 5px 0;
    color: #cbd5e1;
    font-size: 14px;
  }

  :global(.leaflet-popup-content-wrapper) {
    background: rgba(15, 23, 42, 0.95) !important;
    border: 1px solid rgba(148, 163, 184, 0.2) !important;
    backdrop-filter: blur(8px);
  }

  :global(.leaflet-popup-tip) {
    background: rgba(15, 23, 42, 0.95) !important;
    border: 1px solid rgba(148, 163, 184, 0.2) !important;
  }

</style>